name: Release

on:
  push:
    tags:
      - "v*"

env:
  BIN_NAME: TorrentUtilsR

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ env.TAG }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Get the release version from the tag
      if: env.TAG == ''
      run: echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
    - name: Show the tag
      run: |
        echo "tag is: $TAG"
    - name: Create GitHub release
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release create $TAG --verify-tag --draft --title $TAG

  build-release:
    name: build-release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        build: [win-msvc, linux]
        BUILD_TARGET: [release]
        include:
          - build: win-msvc
            target: x86_64-pc-windows-msvc
            os: windows-2022
          - build: linux
            target: x86_64-unknown-linux-musl
            os: ubuntu-24.04
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1
    - name: Install musl-tools (Linux only)
      if: matrix.os == 'ubuntu-24.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
        musl-gcc --version
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Build release binary
      run: cargo build --target ${{ matrix.target }} --verbose --release
    - name: Build archive
      shell: bash
      run: |
        outdir="./target/${{ matrix.target }}/release"
        staging="${{ env.BIN_NAME }}_${{ needs.create-release.outputs.tag }}_${{ matrix.target }}"
        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "target/$staging.exe"
          echo "ASSET=target/$staging.exe" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "target/$staging"
          echo "ASSET=target/$staging" >> $GITHUB_ENV
        fi
    - name: Upload release archive
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        tag="${{ needs.create-release.outputs.tag }}"
        gh release upload "$tag" ${{ env.ASSET }}

  publish-release:
    name: Publish Release
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1
    - name: Publish Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release edit "${{ needs.create-release.outputs.tag }}" --draft=false
