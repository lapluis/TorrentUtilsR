name: _build

on:
  workflow_call:
    inputs:
      bin_name:
        required: true
        type: string
      release_tag:
        required: false
        default: ""
        type: string

permissions:
  contents: write

env:
  BIN_NAME: ${{ inputs.bin_name }}
  CARGO_TERM_COLOR: always

jobs:
  build-matrix:
    name: build (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            target: x86_64-pc-windows-msvc
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Install musl-tools
        if: matrix.os == 'ubuntu-24.04'
        run: sudo apt-get install -y musl-tools

      - name: Install UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Prepare binary
        shell: bash
        run: |
          set -euo pipefail

          if [ -z "${{ inputs.release_tag }}" ]; then
            STAGING="${{ env.BIN_NAME }}_${{ github.sha }}_${{ matrix.target }}"
          else
            STAGING="${{ env.BIN_NAME }}_${{ inputs.release_tag }}_${{ matrix.target }}"
          fi

          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "target/$STAGING.exe"
            upx --best --ultra-brute "target/$STAGING.exe"
            echo "ASSET=target/$STAGING.exe" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "target/$STAGING"
            upx --best --ultra-brute "target/$STAGING"
            echo "ASSET=target/$STAGING" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        if: inputs.release_tag == ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.target }}-${{ github.sha }}
          path: ${{ env.ASSET }}
          if-no-files-found: error

      - name: Upload to GitHub Release
        if: inputs.release_tag != ''
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload "${{ inputs.release_tag }}" "${{ env.ASSET }}"
